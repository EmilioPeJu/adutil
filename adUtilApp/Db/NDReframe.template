# Macros:
# % macro, P,         Device Prefix
# % macro, R,         Device Suffix
# % macro, PORT,      Asyn Port name
# % macro, PRECOUNT,  Pre-trigger frame count
# % macro, POSTCOUNT, Post-trigger frame count
# % gui, $(PORT), edmtab, NDReframe.edl, P=$(P),R=$(R)

# # Control record, are we running
record(busy, "$(P)$(R)Capture") {
  field(DTYP, "asynInt32")
  field(OUT, "@asyn($(PORT) 0)REFRAME_CONTROL")
  field(ZNAM, "Done")
  field(ZSV,  "NO_ALARM")
  field(ONAM, "Capture")
  field(OSV,  "MINOR")
}

# # Control readback record
record(bi, "$(P)$(R)Capture_RBV") {
  field(SCAN, "I/O Intr")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT) 0)REFRAME_CONTROL")
  field(ZNAM, "Done")
  field(ZSV,  "NO_ALARM")
  field(ONAM, "Capturing")
  field(OSV,  "MINOR")
}

# Mode readback
record(mbbi, "$(P)$(R)Mode_RBV") {
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT) 0)REFRAME_MODE")
  field(ZRST, "Idle")
  field(ZRVL, "0")
  field(ONST, "Armed")
  field(ONVL, "1")
  field(TWST, "Gating")
  field(TWVL, "2")
  field(THST, "Acquiring")
  field(THVL, "3")
  field(SCAN, "I/O Intr")
}

# # Status message
record(stringin, "$(P)$(R)StatusMessage")
{
    field(PINI, "1")
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn($(PORT) 0)REFRAME_STATUS")
    field(SCAN, "I/O Intr")
}

# # Number of pre-count frames
record(longout, "$(P)$(R)PRECOUNT") {
  field(DTYP, "asynInt32")
  field(OUT, "@asyn($(PORT) 0)REFRAME_PRE_SAMPLES")
  field(VAL, "$(PRECOUNT=100)")
  field(PINI, "1")
}


# # Number of post-count frames
record(longout, "$(P)$(R)POSTCOUNT") {
  field(DTYP, "asynInt32")
  field(OUT, "@asyn($(PORT) 0)REFRAME_POST_SAMPLES")
  field(VAL, "$(POSTCOUNT=100)")
  field(PINI, "1")
}


# # Force a soft trigger
record(busy, "$(P)$(R)Trigger") {
  field(DTYP, "asynInt32")
  field(OUT, "@asyn($(PORT) 0)REFRAME_SOFT_TRIGGER")
  field(ZNAM, "Done")
  field(ZSV,  "NO_ALARM")
  field(ONAM, "Trigger")
  field(OSV,  "MINOR")
  field(VAL, "1")
}

# # Has a trigger been received
record(bi, "$(P)$(R)Trigger_RBV") {
  field(SCAN, "I/O Intr")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT) 0)REFRAME_TRIGGERED")
  field(ZNAM, "Done")
  field(ZSV,  "NO_ALARM")
  field(ONAM, "Triggered")
  field(OSV,  "MINOR")
}

record(longout, "$(P)$(R)TriggerChannel") {
  field(DTYP, "asynInt32")
  field(OUT, "@asyn($(PORT) 0)REFRAME_TRIGGER_CHAN")
  field(VAL, "1")
  field(PINI, "1")
}

record(longout, "$(P)$(R)TriggerChannel") {
  field(DTYP, "asynInt32")
  field(OUT, "@asyn($(PORT) 0)REFRAME_TRIGGER_CHAN")
  field(VAL, "1")
  field(PINI, "1")
}

record(bo, "$(P)$(R)TriggerOnCond") {
  field(DTYP, "asynInt32")
  field(OUT, "@asyn($(PORT) 0)REFRAME_START_COND")
  field(ZNAM, "On Low")
  field(ONAM, "On High")
  field(VAL, "1")
  field(PINI, "1")
}

record(ao, "$(P)$(R)TriggerOnThresh") {
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn($(PORT) 0)REFRAME_START_THRESH")
  field(VAL, "1.0")
  field(PINI, "1")
}

record(bo, "$(P)$(R)TriggerOffCond") {
  field(DTYP, "asynInt32")
  field(OUT, "@asyn($(PORT) 0)REFRAME_END_COND")
  field(ZNAM, "On Low")
  field(ONAM, "On High")
  field(VAL, "0")
  field(PINI, "1")
}

record(ao, "$(P)$(R)TriggerOffThresh") {
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn($(PORT) 0)REFRAME_END_THRESH")
  field(VAL, "0.0")
  field(PINI, "1")
}

record(longout, "$(P)$(R)TriggerCount") {
  field(DTYP, "asynInt32")
  field(OUT, "@asyn($(PORT) 0)REFRAME_TRIGGER_MAX")
  field(VAL, "1")
  field(PINI, "1")
}

record(longin, "$(P)$(R)TriggerCount_RBV") {
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT) 0)REFRAME_TRIGGER_COUNT")
  field(SCAN, "I/O Intr")
}

record(longin, "$(P)$(R)BufferFrames") {
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT) 0)REFRAME_BUFFER_FRAMES")
  field(SCAN, "I/O Intr")
}

record(longin, "$(P)$(R)BufferSamples") {
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT) 0)REFRAME_BUFFER_SAMPLES")
  field(SCAN, "I/O Intr")
}


