#=================================================================#
# Template file: NDReframe.template
# Macros:
# % macro, P,         Device Prefix
# % macro, R,         Device Suffix
# % macro, PORT,      Asyn Port name
# % macro, ADDR,      Asyn address
# % macro, TIMEOUT,   Asyn timeout
# % macro, PRECOUNT,  Pre-trigger frame count
# % macro, POSTCOUNT, Post-trigger frame count
# % gui, $(PORT), edmtab, NDReframe.edl, P=$(P),R=$(R)

# # Control record, are we running
record(busy, "$(P)$(R)Capture") {
  field(DTYP, "asynInt32")
  field(OUT, "@asyn($(PORT) 0)REFRAME_CONTROL")
  field(ZNAM, "Done")
  field(ZSV,  "NO_ALARM")
  field(ONAM, "Capture")
  field(OSV,  "MINOR")
}

# Mode readback
record(mbbi, "$(P)$(R)Mode_RBV") {
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT) 0)REFRAME_MODE")
  field(ZRST, "Idle")
  field(ZRVL, "0")
  field(ONST, "Armed")
  field(ONVL, "1")
  field(TWST, "Gating")
  field(TWVL, "2")
  field(THST, "Acquiring")
  field(THVL, "3")
  field(SCAN, "I/O Intr")
}

# # Status message
record(stringin, "$(P)$(R)StatusMessage")
{
    field(PINI, "1")
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn($(PORT) 0)REFRAME_STATUS")
    field(SCAN, "I/O Intr")
}

# # Number of pre-count frames
record(longout, "$(P)$(R)PRECOUNT") {
  field(DTYP, "asynInt32")
  field(OUT, "@asyn($(PORT) 0)REFRAME_PRE_SAMPLES")
  field(VAL, "$(PRECOUNT=100)")
  field(PINI, "1")
}


# # Number of post-count frames
record(longout, "$(P)$(R)POSTCOUNT") {
  field(DTYP, "asynInt32")
  field(OUT, "@asyn($(PORT) 0)REFRAME_POST_SAMPLES")
  field(VAL, "$(POSTCOUNT=100)")
  field(PINI, "1")
}


# # Force a soft trigger
record(busy, "$(P)$(R)Soft_Trigger") {
  field(DTYP, "asynInt32")
  field(OUT, "@asyn($(PORT) 0)REFRAME_SOFT_TRIGGER")
  field(ZNAM, "Off")
  field(ZSV,  "NO_ALARM")
  field(ONAM, "On")
  field(OSV,  "MINOR")
  field(VAL, "1")
}

record(bi, "$(P)$(R)Soft_Trigger_RBV") {
  field(SCAN, "I/O Intr")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT) 0)REFRAME_SOFT_TRIGGER")
  field(ZNAM, "Done")
  field(ZSV,  "NO_ALARM")
  field(ONAM, "Triggered")
  field(OSV,  "MINOR")

}

record(longout, "$(P)$(R)TriggerChannel") {
  field(DTYP, "asynInt32")
  field(OUT, "@asyn($(PORT) 0)REFRAME_TRIGGER_CHAN")
  field(VAL, "1")
  field(PINI, "1")
}

record(longout, "$(P)$(R)TriggerChannel") {
  field(DTYP, "asynInt32")
  field(OUT, "@asyn($(PORT) 0)REFRAME_TRIGGER_CHAN")
  field(VAL, "1")
  field(PINI, "1")
}

record(mbbo, "$(P)$(R)TriggerOnCond") {
  field(DTYP, "asynInt32")
  field(OUT, "@asyn($(PORT) 0)REFRAME_START_COND")
  field(ZRST, "Below Threshold")
  field(ZRVL, "0")
  field(ONST, "Above Threshold")
  field(ONVL, "1")  
  field(TWST, "Rising Edge")
  field(TWVL, "2")
  field(THST, "Falling Edge")
  field(THVL, "3")
  field(FRST, "Always On")
  field(FRVL, "4")
  field(FVST, "Always Off")
  field(FVVL, "5")
  field(VAL, "1")
  field(PINI, "1")
}

record(ao, "$(P)$(R)TriggerOnThresh") {
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn($(PORT) 0)REFRAME_START_THRESH")
  field(VAL, "1.0")
  field(PINI, "1")
}

record(mbbo, "$(P)$(R)TriggerOffCond") {
  field(DTYP, "asynInt32")
  field(OUT, "@asyn($(PORT) 0)REFRAME_END_COND")
  field(ZRST, "Below Threshold")
  field(ZRVL, "0")
  field(ONST, "Above Threshold")
  field(ONVL, "1")  
  field(TWST, "Rising Edge")
  field(TWVL, "2")
  field(THST, "Falling Edge")
  field(THVL, "3")
  field(FRST, "Always On")
  field(FRVL, "4")
  field(FVST, "Always Off")
  field(FVVL, "5")
  field(VAL, "0")
  field(PINI, "1")
}

record(ao, "$(P)$(R)TriggerOffThresh") {
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn($(PORT) 0)REFRAME_END_THRESH")
  field(VAL, "0.0")
  field(PINI, "1")
}

record(longout, "$(P)$(R)TriggerCount") {
  field(DTYP, "asynInt32")
  field(OUT, "@asyn($(PORT) 0)REFRAME_TRIGGER_MAX")
  field(VAL, "1")
  field(PINI, "1")
}

record(mbbo, "$(P)$(R)TriggerMode") {
  field(DTYP, "asynInt32")
  field(OUT, "@asyn($(PORT),$(ADDR),$(TIMEOUT))REFRAME_REARM_MODE")
  field(ZRST, "Single")
  field(ZRVL, "0")
  field(ONST, "Multiple")
  field(ONVL, "1")
  field(TWST, "Continuous")
  field(TWVL, "2")
  field(VAL,  "2")
}

record(longin, "$(P)$(R)TriggerCount_RBV") {
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT) 0)REFRAME_TRIGGER_COUNT")
  field(SCAN, "I/O Intr")
}

record(longin, "$(P)$(R)OutputCount_RBV") {
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT) 0)REFRAME_OUTPUT_COUNT")
  field(SCAN, "I/O Intr")
}

record(longin, "$(P)$(R)IgnoredCount_RBV") {
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT) 0)REFRAME_IGNORED_COUNT")
  field(SCAN, "I/O Intr")
}

record(longin, "$(P)$(R)BufferFrames") {
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT) 0)REFRAME_BUFFER_FRAMES")
  field(SCAN, "I/O Intr")
}

record(longin, "$(P)$(R)BufferSamples") {
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT) 0)REFRAME_BUFFER_SAMPLES")
  field(SCAN, "I/O Intr")
}

record(mbbo, "$(P)$(R)PermitOverlap") {
  field(DTYP, "asynInt32")
  field(OUT, "@asyn($(PORT),$(ADDR),$(TIMEOUT))REFRAME_OVERLAP_TRIGS")
  field(ZRST, "No")
  field(ZRVL, "0")
  field(ONST, "Yes")
  field(ONVL, "1")
  field(VAL, "0")
}


